import tkinter as tk
from tkinter import messagebox
import sqlite3

# ---------- DATABASE SETUP ----------
conn = sqlite3.connect("contacts.db")
cur = conn.cursor()
cur.execute("""
    CREATE TABLE IF NOT EXISTS contacts (
        id INTEGER PRIMARY KEY,
        name TEXT NOT NULL,
        phone TEXT NOT NULL,
        email TEXT,
        address TEXT
    )
""")
conn.commit()

# ---------- FUNCTIONALITY ----------
def add_contact():
    name = name_entry.get().strip()
    phone = phone_entry.get().strip()
    email = email_entry.get().strip()
    address = address_entry.get().strip()

    if name and phone:
        cur.execute("INSERT INTO contacts (name, phone, email, address) VALUES (?, ?, ?, ?)",
                    (name, phone, email, address))
        conn.commit()
        messagebox.showinfo("Success", "Contact added.")
        view_contacts()
        clear_entries()
    else:
        messagebox.showerror("Error", "Name and phone are required.")

def view_contacts():
    contact_list.delete(0, tk.END)
    cur.execute("SELECT * FROM contacts ORDER BY name")
    for row in cur.fetchall():
        contact_list.insert(tk.END, f"{row[1]} | {row[2]} | {row[3]} | {row[4]}")

def delete_contact():
    selected = contact_list.curselection()
    if selected:
        contact = contact_list.get(selected[0])
        name = contact.split("|")[0].strip()
        cur.execute("DELETE FROM contacts WHERE name=?", (name,))
        conn.commit()
        messagebox.showinfo("Deleted", f"{name} removed.")
        view_contacts()
    else:
        messagebox.showwarning("Warning", "Select a contact to delete.")

def search_contact():
    query = name_entry.get().strip()
    contact_list.delete(0, tk.END)
    
    if not query:
        messagebox.showwarning("Warning", "Enter a name to search.")
        return

    cur.execute("SELECT * FROM contacts WHERE name LIKE ?", ('%' + query + '%',))
    results = cur.fetchall()
    
    if results:
        for row in results:
            contact_list.insert(tk.END, f"{row[1]} | {row[2]} | {row[3]} | {row[4]}")
    else:
        messagebox.showinfo("Not Found", "No contact found with that name.")

def clear_entries():
    name_entry.delete(0, tk.END)
    phone_entry.delete(0, tk.END)
    email_entry.delete(0, tk.END)
    address_entry.delete(0, tk.END)

# ---------- GUI SETUP ----------
root = tk.Tk()
root.title("Real Contact Book")
root.geometry("600x500")
root.configure(bg="#1e272e")

# Labels and Entries
form_frame = tk.Frame(root, bg="#1e272e")
form_frame.pack(pady=10)

tk.Label(form_frame, text="Name:", fg="white", bg="#1e272e").grid(row=0, column=0, sticky="e")
tk.Label(form_frame, text="Phone:", fg="white", bg="#1e272e").grid(row=1, column=0, sticky="e")
tk.Label(form_frame, text="Email:", fg="white", bg="#1e272e").grid(row=2, column=0, sticky="e")
tk.Label(form_frame, text="Address:", fg="white", bg="#1e272e").grid(row=3, column=0, sticky="e")

name_entry = tk.Entry(form_frame, width=40)
phone_entry = tk.Entry(form_frame, width=40)
email_entry = tk.Entry(form_frame, width=40)
address_entry = tk.Entry(form_frame, width=40)

name_entry.grid(row=0, column=1, pady=2)
phone_entry.grid(row=1, column=1, pady=2)
email_entry.grid(row=2, column=1, pady=2)
address_entry.grid(row=3, column=1, pady=2)

# Buttons
btn_frame = tk.Frame(root, bg="#1e272e")
btn_frame.pack(pady=10)

tk.Button(btn_frame, text="Add", width=10, command=add_contact).grid(row=0, column=0, padx=5)
tk.Button(btn_frame, text="Search", width=10, command=search_contact).grid(row=0, column=1, padx=5)
tk.Button(btn_frame, text="Delete", width=10, command=delete_contact).grid(row=0, column=2, padx=5)
tk.Button(btn_frame, text="View All", width=10, command=view_contacts).grid(row=0, column=3, padx=5)

# Contact List with Scrollbar
list_frame = tk.Frame(root)
list_frame.pack(pady=10)

scrollbar = tk.Scrollbar(list_frame)
contact_list = tk.Listbox(list_frame, width=80, height=15, yscrollcommand=scrollbar.set)
scrollbar.config(command=contact_list.yview)

contact_list.pack(side="left", fill="both")
scrollbar.pack(side="right", fill="y")

tk.Label(root, text="AKTHIRU", font=("Arial", 8), fg="skyblue", bg="#1e272e").pack(side="bottom", pady=5)

# Run initial view
view_contacts()

root.mainloop()
